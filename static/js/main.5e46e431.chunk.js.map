{"version":3,"sources":["Filter/Filter.module.css","Components/ContactItem/ContactItem.js","Components/ContactList/ContactList.js","Components/ContactForm/ContactForm.js","Filter/Filter.js","App.js","reportWebVitals.js","index.js","Components/ContactItem/ContactItem.module.css","Components/ContactForm/ContactForm.module.css"],"names":["module","exports","ContactItem","className","css","item","name","this","props","number","type","button","onClick","onDeleteNumber","Component","ContactList","contacts","map","contact","onDeleteContact","id","ContactForm","state","inputNameId","shortid","generate","inputTelId","findCurrentValue","e","target","value","setState","addContact","preventDefault","filterContact","find","toLowerCase","alert","onAdd","onSubmit","wrap","htmlFor","input","onChange","pattern","title","required","Filter","inputFilterId","onFilter","filter","App","addNewContact","person","prevState","findFilterValue","removeContact","pers","normalizeFilter","filterCurrentTel","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e46e431.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2JDfA\",\"inputFilterId\":\"Filter_inputFilterId__1FXeI\"};","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./ContactItem.module.css\";\r\n\r\nclass ContactItem extends Component {\r\n  render() {\r\n    return (\r\n      <li className={css.item}>\r\n        <span className={css.name}>{`${this.props.name}:`}</span>\r\n        <span className={css.number}>{this.props.number}</span>\r\n        <button\r\n          type=\"submit\"\r\n          className={css.button}\r\n          onClick={() => this.props.onDeleteNumber(this.props.name)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  onDeleteNumber: PropTypes.func,\r\n};\r\n\r\nexport default ContactItem;","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Fragment } from \"react/cjs/react.production.min\";\r\nimport ContactItem from \"../ContactItem/ContactItem\";\r\n\r\nclass ContactList extends Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.contacts.map((contact) => {\r\n          return (\r\n            <Fragment key={contact.id}>\r\n              <ContactItem\r\n                name={contact.name}\r\n                number={contact.number}\r\n                onDeleteNumber={this.props.onDeleteContact}\r\n              />\r\n            </Fragment>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;","import { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  inputNameId = shortid.generate();\r\n  inputTelId = shortid.generate();\r\n\r\n  findCurrentValue = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  addContact = (e) => {\r\n    e.preventDefault();\r\n    this.props.filterContact.find(\r\n      (contact) => contact.name.toLowerCase() === this.state.name.toLowerCase()\r\n    )\r\n      ? alert(`${this.state.name} is already in contacts`)\r\n      : this.props.onAdd(this.state);\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.addContact} className={css.wrap}>\r\n        <label htmlFor={this.inputNameId}>\r\n          Name\r\n          <input\r\n            className={css.input}\r\n            onChange={this.findCurrentValue}\r\n            value={this.state.name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            id={this.inputNameId}\r\n          />\r\n        </label>\r\n        <label htmlFor={this.inputTelId}>\r\n          Number\r\n          <input\r\n            className={css.input}\r\n            onChange={this.findCurrentValue}\r\n            value={this.state.number}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            id={this.inputTelId}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={css.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  filterContact: PropTypes.array,\r\n  onAdd: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;","import { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./Filter.module.css\";\r\n\r\nclass Filter extends Component {\r\n  inputFilterId = shortid.generate();\r\n\r\n  render() {\r\n    return (\r\n      <label className={css.inputFilterId}\r\n      htmlFor={this.inputFilterId}>\r\n        Find contacts by name\r\n        <input\r\n          className={css.input}\r\n          onChange={this.props.onFilter}\r\n          type=\"text\"\r\n          value={this.props.filter}\r\n          id={this.inputFilterId}\r\n        />\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onFilter: PropTypes.func,\r\n};\r\n\r\nexport default Filter;","import React, { Component } from \"react\";\nimport shortid from \"shortid\";\n\nimport ContactList from \"./Components/ContactList/ContactList\";\nimport ContactForm from \"./Components/ContactForm/ContactForm\";\nimport Filter from \"./Filter/Filter\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  addNewContact = (person) => {\n    const contact = {\n      id: shortid.generate(),\n      name: person.name,\n      number: person.number,\n    };\n\n    this.setState((prevState) => ({\n      contacts: [contact, ...prevState.contacts],\n    }));\n  };\n\n  findFilterValue = (e) => {\n    this.setState({\n      filter: e.target.value,\n    });\n  };\n\n  removeContact = (name) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((pers) => pers.name !== name),\n    }));\n  };\n\n  render() {\n    const normalizeFilter = this.state.filter.toLowerCase();\n    const filterCurrentTel = this.state.contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n\n    return (\n      <div className=\"wrap\">\n        <h1 className=\"title\">Phonebook</h1>\n        <ContactForm\n          filterContact={filterCurrentTel}\n          onAdd={this.addNewContact}\n        />\n        <h2 className=\"title\">Contacts</h2>\n        <Filter filter={this.state.filter} onFilter={this.findFilterValue} />\n        <ContactList\n          contacts={filterCurrentTel}\n          onDeleteContact={this.removeContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__roTtq\",\"name\":\"ContactItem_name__3KAaI\",\"button\":\"ContactItem_button__2ERwG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"ContactForm_wrap__1_TIk\",\"input\":\"ContactForm_input__25b2L\",\"button\":\"ContactForm_button__2QQXk\"};"],"sourceRoot":""}